class Person {
  String _name;
  int _age;
  String _desc;
  
  Person(this._name, this._age, this._desc);
  
  void addOneYear() {
    _age++;
  }
  
  String get name => _name;
  int get age => _age;
  String get desc => '$_desc!!!'; //느낌표 고정
  set desc(String v) => _desc = v;
 
}

void main() {
  var na = Person('김희선', 28, '김희선은 김희성이다.');
  //na.name = '김희선'; 수정이 그냥 되게 해버리면 프로그램의 버그를 가져올 수 있음
  //na.age = 28;   이름과 나이를 고정시키기로 함
  print([na.name, na.age, na.desc]);
                  
  //na.name = '김희성';
  //na.age++;
  na.addOneYear();
  na.desc = '아니다. 김희상이다.';
  print([na.name, na.age, na.desc]);
  
  
}

//----------------------------------------------------------------------------------------

class Person {
  String? name;
  int? age;

  Person({this.name, this.age});
}

void main() {
  var p = Person(); //nume: null, age: null;
  var p2 = Person(name: '김희선'); //nane:'감희선', age: null;
  var p3 = Person(age: 28); //nume: null, age: 28;
  var p4 = Person(name: '김희선', age: 28);
  
}

//----------------------------------------------------------------------------------------

class Rectangle {
  // 사각형을 왼쪽, 상단, 너비, 높이로 표현
  num left, top, width, height;
  
  Rectangle(this.left, this.top, this.width, this.height);
  
  // 오른쪽, 하단은 필드를 생성하지 않고 get/set으로 계산하여 표현
  num get right => left + width;
  set right(num value) => left = value - width;
  num get bottom => top + height;
  set bottom(num value) => top = value - height;

}

void main() {
  var r1 = Rectangle(5, 10, 20, 25);
  print([r1.left, r1.top, r1.width, r1.height]);
  print([r1.width, r1.height]);

  // left, top, width, height <-> left, top, right, bottom

}

//----------------------------------------------------------------------------------------

class Hero {
  String name = '영웅';
  
  void run() {
    print('뛴다');
  }
}


class SuperHero extends Hero {
  @override
  void run() {
    super.run();
    this.fly();
  }
  
  void fly() {
    print('난다!');
  }
}

void main() {
  var hero = SuperHero();
  hero.run();
  //hero.fly();
  print(hero.name);

}

//----------------------------------------------------------------------------------------

abstract class Monster {
  void attack();
}

class Goblin implements Monster {
  @override
  void attack() {
    print ('고블린 어택!');
  }
}

class Bat implements Monster {
  @override
  void attack() {
    print('할퀴기!');
  }
}

void main() {
  Goblin g1 = Goblin();
  Bat b1 = Bat();
  g1.attack();
  b1.attack();
  
  //monsters의 타입은?
  List<Monster> monsters = [g1, b1];
  monsters.forEach((m) => m.attack());

}

//----------------------------------------------------------------------------------------

enum Status {login, logout}

void main() {
  var authStatus = Status.logout;
  print(authStatus);
  
  switch (authStatus) {
    case Status.login: //0은 로그인 상태
      print('로그인');
      break;
      
    case Status.logout: //로그아웃 상태
      print('로그아웃');
      break;
  }

}

//----------------------------------------------------------------------------------------

enum Status {login, logout}

void main() {
  var l1 = [1, 2, 3, 4, 5, 6];
  var l2 =['가', '나', '다', '라', '마', '바'];
  print(l1);
  print(l2);
  
  l1.add(7); //7 추가하기
  print(l1);
  l1.remove(2); //2 없애기
  print(l1);
  
  
  //m몹으로 나라의 수도를 표현할 때 유용
  var m1 = {'한국': '서울', '일본': '도쿄'};
  print(m1);
  print(m1['한국']);
  m1['중국'] = '북경';
  
  //s
  var s1 = {1, 2, 3, 4, 5};
  print(s1);
  s1.add(6);
  print(s1);
  s1.add(6);
  print(s1);
}

//----------------------------------------------------------------------------------------

void main() {
  var lottoNums = [5, 6, 11, 13, 17, 21];
  lottoNums.forEach((num) {
    print(num);
  });

}

//----------------------------------------------------------------------------------------

void func_a()
{
  print('왼쪽!');
}

void func_b()
{
  print('오른쪽!');
}

void main() {
  //버전1
  var fun = func_a;
  fun();
  
  //버전2
  fun = func_b;
  fun();
  
  var list = [1, 2, 3, 4, 5];
  
  // 더 줄여서 출력을 짧게 쓸 수 있다
  // list.forEach((num) => print(num));
  list.forEach(print);
}
