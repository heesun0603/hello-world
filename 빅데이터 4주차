setwd("c:r_workdata")

Sys.setlocale("LC_ALL", "Korean")

library(lubridate)


# 서로 다른 데이터 타입 처리 객체
# 1. list
# - 백터와 비슷한 형태(키, 값)으로 저장



l1 = list(name = '홍길동',
          addr = '서울',
          tel = '010-1111-1111',
          pay = 500)
l1

#특정 키만 조회
l1$addr

#list에 요소를 추가/삭제
l1$birth = '2003'
l1$birth

l1$name = c('고길동', '마이콜')
l1$name #덮어쓰기 됨

l1$name[length(l1$name)+1] = '홍길동'
l1$name # 마지막에 삽입하기

#append() 사용
l1$name = append(l1$name, '둘리', after =1)
l1$name #원하는 부분에 삽입

#list 삭제
# 1. 특정 값을 삭제
l1$name[length(l1$name)-1] = NA
l1$name

# 2. 리스트 키 삭제
l1$birth = NULL # birth 키 삭제

# 2. dataframe
# 2-1 각 컬럼(라벨)별로 먼저 생성 후 data.frame으로 모든 컬럼을 합친다
no = c(1,2,3,4)
name = c('Apple', 'Banana', 'Peach', 'Graph')
price = c(500,200,100,300)
qty = c(5,2,4,7)
sales = data.frame(NO=no, NAME=name, PRICE=price, QTY=qty)
sales
class(sales)
str(sales)


# 2-2 행렬로 생성
sales2 = matrix(c(1,'Apple',500,5,
                 2,'Peach',200,2,
                 3,'Bannana',50,4,
                 4,'Graph',100,7),4,by=T)
sales2

d1 = data.frame(sales2)
d1

names(d1) = c('NO', 'NAME', 'PRICE', 'QTY')
d1
class(d1)
str(d1)

# 데이터 조회
sales
sales$NAME
sales[1,3]
sales[,2]
sales[3,]
sales[c(1,3),]
sales[,c(2,4)] #모든 행의 2열과 4열을 가져와라
sales[,c(1:3)] #모든 행의 1열부터 3열까지 모두 가져와라

# 원하는 조건만 검색 : subset()
subset(sales,QTY <= 5)
subset(sales, PRICE == 200)
subset(sales, NAME == 'Apple')

# 데이터 추가/합치기 : rbind(), cbind(), merge()
no=c(1,2,3)
name=c('apple', 'banana', 'peach')
price=c(100,200,300)
df1=data.frame(NO=no, NAME=name,PRICE=price)
df1

no=c(10,20,30)
name=c('train', 'car', 'ship')
price=c(1000,2000,3000)
df2=data.frame(NO=no, NAME=name, PRICE=price)

df1
df2
df3 = cbind(df1, df2)
df3

df4=rbind(df1,df2)
df4
df5=data.frame(name=c('apple', 'banana', 'cherry'), price=c(300,200,100))
df6=data.frame(name=c('apple', 'berry', 'cherry'), qty=c(10,20,30))
cbind(df5,df6)
rbind(df5,df6) #오류가남 컬럼 명이 다르기 때문

merge(df5,df6) # 이름을 기준으로 두 데이터에 있는 겹치는 이름을 합쳐서 출력
merge(df5,df6,all =T) # 다 출력시키고 싶을 경우 출력하는 방법이나 없는 값은 NA로 표시된다

df1
# 번호가 4, 5이고, 이름은 'mango', 'berry'와 가격이 각 400,500인 데이터 생성 후 df1행 추가

n1 = data.frame(NO=c(4,5), NAME=c('mango', 'berry'), PRICE=c(400,500))
df1=rbind(df1,n1)
df1

#수량이 (10,20,30,40,50)인 데이터를 열추가 하시오
df1 = cbind(df1, qty=c(10,20,30,40,50))
df1

# 데이터프레임에서 특정 컬럼만 골라내서 새로운 형태 만들기
no = c(1,2,3,4,5)
name=c('이순신', '김유신', '유관순', '강감찬', '안중근')
addr=c('서울', '대전', '대구','부산','광주')
tel=c(111,222,333,444,555)
hobby=c('놀','먹','자','게','멍')
mem=data.frame(NO=no, NAME=name, ADDR=addr, TEL=tel,HOBBY=hobby)
mem
mem2=subset(mem, select=c(NO,NAME,TEL))
mem2

mem3 = subset(mem, select=-TEL)
mem3

colnames(mem3) = c('번호','이름','주소','취미')
mem3

sales
ncol(sales) # 단어 앞에 n이 있으면 갯수
nrow(sales) # 행의 갯수
names(sales)
colnames(sales)
rownames(sales)
row.names(sales)

sales[c(2,3,1),]


# 혼자서 해보기
# 문제1) data.frame()과 c()를 조합해서 표의 내용을 데이터 프레임으로 만들어 출력
# 제품   가격   판매량
# 사과   1803    24
# 딸기   1501    38
# 수박   3040    13

sales = data.frame(제품 = c('사','딸','수'),
                   가격 = c(1803,1501,3040),
                   판매량 = c(24,38,13))

sales

# 문제2) 앞에서 만든 데이터 프레임을 이용해서 과일 가격 평균, 판매량 평균을 구해라
sum(sales$가격)/3
mean(sales$가격) #평균 구하는 함수
round(mean(sales$가격),2) #소수점 2번째 자리까지만 출력

mean(sales$판매량) # 판매량 평균

# 데이터 수정 : 변수명 바꾸기
install.packages("dplyr") #이걸 꼭 깔아줘야함함
library(dplyr)

df1 = data.frame(var1=c(1,2,1),
                 var2=c(2,3,3))
df2=df1
df2=rename(df2, v2=var2)
df2

# 변수 조합해서 파생변수를 만들기
df1
df1$var_sum = df1$var1+df1$var2
df1
#결과
#  var1 var2 var_sum
# 1    1    2       3
# 2    2    3       5
# 3    1    3       4

install.packages("ggplot2")
library(ggplot2)

mpg
View(mpg)
class(mpg)
str(mpg)
head(mpg)
tail(mpg)

mpg1=mpg
mpg1 = rename(mpg1, city=cty)
mpg1 = rename(mpg1, highway=hwy)
View(mpg1) #표 보여주는 코드

# 작업용 데이터 읽기, 쓰기
# 파일 이름 확인
setwd("c://r_workdata")

list.files()
list.files(all.files = T) # 숨김파일 보기 ( 숨김되어있는 건 앞에 . 이 찍혀있다)
# 결과 : aaa
# 폴더 안에 있는 파일들을 보려고 할 때
#
list.files(recursive = T) # 순환 (마지막 폴더 안에 있는 데이터까지 찾아가서 보여줌)
# 결과 : "aaa/bbb/1-4호선승하차승객수.csv"  

# scan() : 텍스트 파일을 읽어서 백터에 저장
s1 = scan('scan_1.txt')
s1
s1[1]

s2 = scan('scan_2.txt') # 정수값만 읽어옴
s2 # 실제 값은 실수인데 실수부분이 없어지고 정수로 읽어옴

s2 = scan('scan_2.txt', what='') # 실수값도 가져오나 문자열로 인식됨
s2

s3 = scan('scan_3.txt', what='') #문자라 읽지 못해서 what 옵션을 줘야함
s3

s4 = scan('scan_4.txt', what = '') #정수, 실수, 문자가 섞여있어서 읽지못함 what 옵션을 줘야함
s4 # 기본적으로 scan 함수는 정수만 불러오기 때문에 나머지는 what를 해주어야함

input = scan() # 결과창에 1이 뜨면 거기에 커서를 대고 1 엔터 2엔터 3엔터를 하고 엔터 한 번더 하면 종료
input # 입력한 1 2 3이 뜸

input = scan(what='') #정수 외 할때
input

# readline() : 한줄읽기
input = scan() #정수만만
input
input[3] #한번에 1 2 3 입력해도 각각 다른 인덱스에 저장됨

input2 = readline() #문자열 저장
input2

input2 = readline("R U OK? ") #문자열 저장
input2

# readLines() : 파일을 읽어서 벡터에 저장
input5 = readLines("scan_4.txt") # scan은 정수만 되지만 이건 다 불러올 수 있다 단, 문자로 읽어옴
input5

# read.table() : 데이터를 읽어서 데이터 프레임에 저장
# - 주석이나 공백을 제외하고 읽는다
# 기본적으로 컬럼명이 없다고 판단
f = read.table('fruits.txt', header = T) # 컬럼명을 데이터로 취급함 header=T 를 해서 이름이 있다고 지정해줘야함
f

# read.csv() : csv 파일을 읽기
# read.table과 다르게 기본적으로 컬럼명이 있다고 판단
f3 = read.csv("fruits_3.csv")
f3

f4 = read.csv("fruits_4.csv", header = F) # 컬럼명이 없는 파일header = F 컬럼명이 없다는 뜻
f4

lab = c('NO', 'NAME','PRICE', 'QTY')
f4 = read.csv("fruits_4.csv", header = F, col.names=lab) # 컬럼에 이름이 없으니 넣어달라는 뜻
f4

# read.csv() -> wrtie.csv()
# read.table() -> write.table()

t3 = read.table("csv_test.txt") #안에 내용이 txt 파일이 아니라서 이상하게 출력됨됨
t3

t3 = read.table("csv_test.txt", sep = ',', header = T) # header = T로 컬럼이 있다고 인식해주어야 정상적으로 출력됨됨
t3
